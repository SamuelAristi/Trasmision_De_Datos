"""
Demo completo del proyecto de limpieza de datos.
Este script demuestra todas las funcionalidades del proyecto.
"""
import sys
import os

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.database.connection import db_connection
from src.services.order_service import OrderService
from src.utils.logger import logger


def demo_completo():
    """Demo completo de todas las funcionalidades del proyecto."""
    print("üöÄ" + "=" * 60)
    print("   DEMO COMPLETO - PROYECTO DE LIMPIEZA DE DATOS")
    print("=" * 62)
    
    try:
        # 1. Verificar conexi√≥n
        print("\n1Ô∏è‚É£ VERIFICANDO CONEXI√ìN A LA BASE DE DATOS")
        print("-" * 50)
        if db_connection.test_connection():
            print("‚úÖ Conexi√≥n exitosa a PostgreSQL")
            print("‚úÖ Base de datos: DropshipingDB")
            print("‚úÖ Tabla: orders")
        else:
            print("‚ùå Error en la conexi√≥n")
            return
        
        # 2. Estad√≠sticas b√°sicas
        print("\n2Ô∏è‚É£ ESTAD√çSTICAS B√ÅSICAS")
        print("-" * 50)
        total_query = "SELECT COUNT(*) as total FROM orders"
        total = db_connection.execute_query(total_query)[0]['total']
        print(f"üìä Total de √≥rdenes: {total:,}")
        
        # 3. Inicializar servicio
        print("\n3Ô∏è‚É£ INICIALIZANDO SERVICIO DE LIMPIEZA")
        print("-" * 50)
        service = OrderService()
        print("‚úÖ OrderService inicializado correctamente")
        
        # 4. Reporte de calidad
        print("\n4Ô∏è‚É£ REPORTE DE CALIDAD DE DATOS")
        print("-" * 50)
        report = service.get_data_quality_report()
        print(f"üìà Completitud promedio: {sum(report['data_completeness'].values()) / len(report['data_completeness']):.1f}%")
        print(f"üìà Duplicados detectados: {report['duplicate_records']}")
        
        # 5. An√°lisis de duplicados
        print("\n5Ô∏è‚É£ AN√ÅLISIS DE DUPLICADOS")
        print("-" * 50)
        dup_result = service.clean_duplicate_orders()
        if dup_result.cleaned_records > 0:
            print(f"‚ö†Ô∏è  Duplicados encontrados: {dup_result.cleaned_records}")
            print("üìã Ejemplos de duplicados:")
            for example in dup_result.cleaning_summary.get('duplicate_examples', [])[:3]:
                print(f"   - ID: {example['order_id']}, Cliente: {example['customer_name']}")
        else:
            print("‚úÖ No se encontraron duplicados")
        
        # 6. An√°lisis de registros incompletos
        print("\n6Ô∏è‚É£ AN√ÅLISIS DE REGISTROS INCOMPLETOS")
        print("-" * 50)
        inc_result = service.clean_incomplete_records()
        if inc_result.cleaned_records > 0:
            print(f"‚ö†Ô∏è  Registros problem√°ticos: {inc_result.cleaned_records}")
            print(f"‚ùå Errores: {inc_result.errors}")
            print(f"‚ö†Ô∏è  Warnings: {inc_result.warnings}")
        else:
            print("‚úÖ No se encontraron registros incompletos")
        
        # 7. Validaci√≥n de tipos de datos
        print("\n7Ô∏è‚É£ VALIDACI√ìN DE TIPOS DE DATOS")
        print("-" * 50)
        val_result = service.validate_data_types()
        print(f"‚ùå Errores de tipo: {val_result.errors}")
        print(f"‚ö†Ô∏è  Warnings de validaci√≥n: {val_result.warnings}")
        
        # 8. Consultas espec√≠ficas
        print("\n8Ô∏è‚É£ CONSULTAS ESPEC√çFICAS")
        print("-" * 50)
        
        # Top categor√≠as
        category_query = """
        SELECT category, COUNT(*) as count, SUM(subtotal_amount) as total
        FROM orders 
        GROUP BY category 
        ORDER BY total DESC
        """
        categories = db_connection.execute_query(category_query)
        print("üèÜ Top categor√≠as por ventas:")
        for i, cat in enumerate(categories, 1):
            print(f"   {i}. {cat['category']}: ${cat['total']:,.0f} ({cat['count']} √≥rdenes)")
        
        # 9. An√°lisis temporal
        print("\n9Ô∏è‚É£ AN√ÅLISIS TEMPORAL")
        print("-" * 50)
        year_query = """
        SELECT EXTRACT(YEAR FROM order_date) as year, COUNT(*) as orders, SUM(subtotal_amount) as total
        FROM orders 
        GROUP BY EXTRACT(YEAR FROM order_date)
        ORDER BY year
        """
        years = db_connection.execute_query(year_query)
        print("üìÖ √ìrdenes por a√±o:")
        for year_data in years:
            print(f"   {int(year_data['year'])}: {year_data['orders']} √≥rdenes, ${year_data['total']:,.0f}")
        
        # 10. Resumen final
        print("\nüîü RESUMEN FINAL")
        print("-" * 50)
        print("‚úÖ Conexi√≥n a base de datos: EXITOSA")
        print("‚úÖ An√°lisis de calidad: COMPLETADO")
        print("‚úÖ Detecci√≥n de duplicados: FUNCIONANDO")
        print("‚úÖ Validaci√≥n de datos: FUNCIONANDO")
        print("‚úÖ Consultas espec√≠ficas: FUNCIONANDO")
        print("‚úÖ Logging: ACTIVO")
        
        print(f"\nüìä DATOS PROCESADOS:")
        print(f"   - Total registros: {total:,}")
        print(f"   - Duplicados: {dup_result.cleaned_records}")
        print(f"   - Registros problem√°ticos: {inc_result.cleaned_records}")
        print(f"   - Warnings totales: {val_result.warnings}")
        
        print("\nüéâ ¬°DEMO COMPLETADO EXITOSAMENTE!")
        print("=" * 62)
        
    except Exception as e:
        print(f"‚ùå Error durante el demo: {e}")
        logger.error(f"Error en demo: {e}")


if __name__ == "__main__":
    demo_completo()
